{"version":3,"sources":["mazealgorithms/recursiveDivisionMaze.jsx","mazealgorithms/stair.jsx","PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/components/togglebutton.js","algorithms/dfs.jsx","algorithms/bfs.jsx","algorithms/astar.jsx","algorithms/Dijkstra.jsx","algorithms/greedyBestFirstSearch.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","mazealgorithms/spiral.jsx","mazealgorithms/randomMaze.jsx","App.js","reportWebVitals.js","index.js"],"names":["maze","start","finish","Node","this","props","col","row","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","Toggle","styled","button","getUnvisitedNeighbourNodes","node","grid","neighbournodes","length","push","filter","neighbournode","isVisited","neighbourNotInUnvisitedNodes","neighbour","unvisitedNodes","neighbourNode","manhattanDistance","finishNode","Math","abs","getNeighbourNodes","neighbourNodes","Dijkstra","startNode","distance","sptSet","allnodes","getAllNodes","sort","a","b","closestNode","shift","Infinity","updateUnvisitedNeighbourNodes","unvisitedNeighbors","previousNode","queue","recursiveDivisionMaze","horizontal","fill","vertical","getWalls","len","filled","i","direction","num","getRandomNum","addWall","slice","indexOf","isStartFinish","tempWalls","temp","splice","max","randomInt","floor","random","getRandInt","wall","array","randomNum","check","x","y","getRandomNode","max_row","max_col","randomRow","randomCol","PathfindingVisualizer","row_count","col_count","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","distanceToFinishNode","isNode","animationstate","getNewGridWithWallToggled","newGrid","newNode","getNewGridWithMaze","changeTheme","theme","setState","inserticon","size","changealgorithm","algo","console","log","window","innerHeight","innerWidth","algorithm","msg","mouseIsPressed","isRunning","isGeneratingMaze","isStartNode","isFinishNode","isWallNode","currRow","currCol","speed","isGridClear","document","getElementById","clearGrid","nodeClassName","toggleIsRunning","visitedNodesInOrder","totalDistance","unshift","AStar","unvisitedNeighbourNodes","unvisitedNeighbourNode","bfs","dfs","neighbours","GreedyBFS","nodesInShortestPathOrder","getNodesInShortestPathOrder","animate","setTimeout","animateShortestPath","currentNode","mazealgo","toggleIsGeneratingMaze","currentCol","coffsetrow","coffsetcol","startRow","Spiral","randomMaze","startWall","stair","animateMaze","navclass","itemclass","btnclass","bgclass","visualizebtnclass","tableid","href","class","type","onClick","visualize","visualizeMaze","clearWalls","changeSpeed","onMouseLeave","handleMouseLeave","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","bgColor","target","url","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d76ae5ca.chunk.js","sourcesContent":["let maze;\r\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  \r\n  let horizontal = fill(grid.length);\r\n  let vertical = fill(grid[0].length);\r\n  maze = [];\r\n  getWalls(vertical, horizontal, grid, startNode, finishNode);\r\n  return maze;\r\n}\r\n\r\nfunction fill(len) {\r\n  let filled = [];\r\n  for (let i = 0; i < len; i++) {\r\n    filled.push(i);\r\n  }\r\n  return filled;\r\n}\r\n\r\n//direction === 0 => Horizontal\r\n//direction === 1 => Vertical\r\n\r\nfunction getWalls(vertical, horizontal, grid, startNode, finishNode) {\r\n  if (vertical.length < 2 || horizontal.length < 2) {\r\n    return;\r\n  }\r\n  let direction;\r\n  let num;\r\n  if (vertical.length > horizontal.length) {\r\n    direction = 1;\r\n    num =  getRandomNum(vertical);\r\n  }\r\n  if (vertical.length <= horizontal.length) {\r\n    direction = 2;\r\n    num =  getRandomNum(horizontal);\r\n  }\r\n\r\n  if (direction === 1) {\r\n    addWall(direction, num, vertical, horizontal, startNode, finishNode);\r\n    getWalls(\r\n      vertical.slice(0, vertical.indexOf(num)), horizontal,grid,startNode, finishNode);\r\n    getWalls(\r\n      vertical.slice(vertical.indexOf(num) + 1),horizontal, grid,startNode, finishNode);\r\n  } else {\r\n    addWall(direction, num, vertical, horizontal, startNode, finishNode);\r\n    getWalls(\r\n      vertical, horizontal.slice(0, horizontal.indexOf(num)), grid,startNode, finishNode);\r\n    getWalls(\r\n      vertical,horizontal.slice(horizontal.indexOf(num) + 1),grid,startNode, finishNode);\r\n  }\r\n}\r\n\r\n\r\n\r\n//direction === 0 => Horizontal\r\n//direction === 1 => Vertical\r\n\r\nfunction addWall(direction, num, vertical, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  if (direction === 1) {\r\n    if (horizontal.length === 2) return;\r\n    for (let temp of horizontal) {\r\n      if (\r\n        (temp === startNode.row && num === startNode.col) ||\r\n        (temp === finishNode.row && num === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([temp, num]);\r\n    }\r\n  } else {\r\n    if (vertical.length === 2) return;\r\n    for (let temp of vertical) {\r\n      if ((num === startNode.row && temp === startNode.col) ||(num === finishNode.row && temp === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([num, temp]);\r\n    }\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(getRandInt(tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    maze.push(wall);\r\n  }\r\n}\r\nfunction getRandomNum(array) {\r\n  let max = array.length - 1;\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 === 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return array[randomNum];\r\n}\r\n\r\n\r\nfunction getRandInt(max) {\r\n  let randomInt =  Math.floor(Math.random() * (max / 3)) +\r\n  Math.floor(Math.random() * (max / 3))+Math.floor(Math.random() * (max / 3));\r\n  if (randomInt % 2 !== 0) {\r\n    if (randomInt === max) {\r\n      randomInt -= 1;\r\n    } else {\r\n      randomInt += 1;\r\n    }\r\n  }\r\n  return randomInt;\r\n}","let start ;\r\nlet finish ;\r\nexport function stair(grid, startNode, finishNode) {\r\n    if (!startNode || !finishNode || startNode === finishNode) {\r\n      return false;\r\n    }\r\n    start = startNode;\r\n    finish = finishNode;\r\n    \r\n    let maze = [];\r\n    let startWall = getRandomNode(grid);\r\n    while(startWall === startNode || startWall[0] === finishNode){\r\n      startWall = getRandomNode(grid);\r\n    }\r\n    let currentRow, currentCol ;\r\n    currentRow = startWall.row;\r\n    currentCol = 0;\r\n   \r\n    maze.push([currentRow,currentCol]);\r\n\r\n  while(currentCol!==grid[0].length-1){\r\n      for(let i =0;i<8;i++){\r\n    if(currentRow>0 && currentCol < grid[0].length-1){\r\n      \r\n      currentRow -- ;\r\n      currentCol++ ;\r\n      \r\n      if(check(currentRow,currentCol))continue;\r\n      else{\r\n        maze.push([currentRow,currentCol]);\r\n      }\r\n      if(currentRow === grid.length-1){\r\n        break;}\r\n          \r\n\r\n    }\r\n  }\r\n\r\n    for(let i =0;i<8;i++){\r\n    if(currentRow<grid.length-1  && currentCol < grid[0].length-1){\r\n      \r\n      currentRow ++; \r\n      currentCol ++;\r\n    \r\n      if(check(currentRow,currentCol)){\r\n        continue;\r\n      }\r\n      else{\r\n        maze.push([currentRow,currentCol]);\r\n      }\r\n      \r\n    \r\n    \r\n    }\r\n  }\r\n    for(let i =0;i<8;i++){\r\n    if(currentRow>0  && currentCol < grid[0].length-1){\r\n      \r\n      currentRow --; \r\n      currentCol ++;\r\n    \r\n      if(check(currentRow,currentCol)){\r\n        continue;\r\n      }\r\n      else{\r\n        maze.push([currentRow,currentCol]);\r\n      }\r\n      if(currentRow === 0){\r\n       \r\n        break;}\r\n    \r\n    \r\n    }\r\n  \r\n  }\r\n  }\r\nreturn maze;\r\n}\r\n\r\n\r\n  function check (x,y){\r\n    if((x===start.row && y=== start.col)|| \r\n    (x=== finish.row && y === finish.col)){\r\n      return true;\r\n\r\n    }\r\n    else{\r\n      return false ;\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  function getRandomNode(grid) {\r\n    let max_row = grid.length-1;\r\n    let max_col = grid[0].length -1;\r\n    let randomRow =\r\n      Math.floor(Math.random() * (max_row / 2)) +\r\n      Math.floor(Math.random() * (max_row / 2));\r\n    if (randomRow % 2 === 0) {\r\n      if (randomRow === max_row) {\r\n        randomRow -= 1;\r\n      } else {\r\n        randomRow += 1;\r\n      }\r\n    }\r\n    let randomCol =\r\n      Math.floor(Math.random() * (max_col / 2)) +\r\n      Math.floor(Math.random() * (max_col / 2));\r\n    if (randomCol % 2 === 0) {\r\n      if (randomCol === max_col) {\r\n        randomCol -= 1;\r\n      } else {\r\n        randomCol += 1;\r\n      }\r\n    }\r\n    \r\n    \r\n    return grid[randomRow][randomCol];\r\n  }\r\n  ","import React, { Component } from 'react';\r\nimport './Node.css';\r\n\r\n\r\n\r\nclass Node extends Component {\r\n   //no state since it is a controlledcomponent(byPathfindingVisualizer)\r\n    render() { \r\n        const {\r\n            col,\r\n            row,\r\n            isFinish,\r\n            isStart,\r\n            isWall,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp,\r\n        \r\n           \r\n          } = this.props;//extracted useful informnation using destructuring\r\n        const extraClassName = isFinish ? 'node-finish': \r\n        isStart ? 'node-start' : \r\n        isWall ? 'node-wall': '';\r\n      ;\r\n        return (\r\n            <td id={`node-${row}-${col}`}\r\n              className={`node ${extraClassName}`}\r\n              onMouseDown={() => onMouseDown(row, col)}\r\n              onMouseEnter={() => onMouseEnter(row, col)}\r\n              onMouseUp={() => onMouseUp()}> \r\n            </td>\r\n          );\r\n    }\r\n}\r\n \r\nexport default Node;","import styled from 'styled-components';\r\n\r\nconst Toggle = styled.button`\r\n    cursor: pointer;\r\n    height: 50px;\r\n    width: 50px;   \r\n    border-radius: 50%;\r\n    border: none;\r\n    \r\n    &:focus {\r\n        outline: none;\r\n    }\r\n    transition: all .5s ease;\r\n`;\r\n\r\nexport default Toggle;\r\n","// Returns all nodes in the order in which they were visited and\r\n// Returns pointers to their previous node allowing us to compute the shortest path\r\n//Depth-first Search is unweighted and does not guarantee the shortest path\r\nexport function dfs(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  const unvisitedNodes = [];\r\n  const visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    \r\n    const unvisitedNeighbourNodes = getUnvisitedNeighbourNodes(closestNode, grid);\r\n    for (let unvisitedNeighbourNode of unvisitedNeighbourNodes) {\r\n      unvisitedNeighbourNode.previousNode = closestNode;\r\n      unvisitedNodes.unshift(unvisitedNeighbourNode);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbourNodes(node, grid) {\r\n  const neighbournodes = [];\r\n  let { row, col } = node;\r\n  if (row !== grid.length - 1) neighbournodes.push(grid[row + 1][col]);\r\n  if (col !== grid[0].length - 1) neighbournodes.push(grid[row][col + 1]);\r\n  if (row !== 0) neighbournodes.push(grid[row - 1][col]);\r\n  if (col !== 0) neighbournodes.push(grid[row][col - 1]);\r\n  \r\n \r\n  return neighbournodes.filter((neighbournode) => !neighbournode.isVisited);\r\n}\r\n   ","// Returns all nodes in the order in which they were visited and\r\n// Returns pointers to their previous node allowing us to compute the shortest path\r\n//Breath-first Search is unweighted and guarantees the shortest path\r\nexport function bfs(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  const unvisitedNodes = [];\r\n  const visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    const closestNode = unvisitedNodes.shift();\r\n    \r\n    if (closestNode.isWall) {\r\n      continue;\r\n    }\r\n    else if (closestNode === finishNode){\r\n       return visitedNodesInOrder;\r\n    }\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    const unvisitedNeighbourNodes = getUnvisitedNeighbourNodes(closestNode, grid);\r\n    for (let unvisitedNeighbourNode of unvisitedNeighbourNodes) {\r\n      unvisitedNeighbourNode.previousNode = closestNode;\r\n      if (neighbourNotInUnvisitedNodes(unvisitedNeighbourNode, unvisitedNodes)) {\r\n        unvisitedNodes.push(unvisitedNeighbourNode);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbourNodes(node, grid) {\r\n  const neighbournodes = [];\r\n  let { row, col } = node;\r\n  if (row !== grid.length - 1) neighbournodes.push(grid[row + 1][col]);\r\n  if (col !== grid[0].length - 1) neighbournodes.push(grid[row][col + 1]);\r\n  if (row !== 0) neighbournodes.push(grid[row - 1][col]);\r\n  if (col !== 0) neighbournodes.push(grid[row][col - 1]);\r\n  \r\n \r\n  return neighbournodes.filter((neighbournode) => !neighbournode.isVisited);\r\n}\r\n   \r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}","// Returns all nodes in the order in which they were visited and\r\n// Returns pointers to their previous node allowing us to compute the shortest path\r\n//A* Search is weighted and guarantees the shortest path\r\n//Modified Dijkstra\r\nexport function AStar(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n\r\n  const unvisitedNodes = []; //open list\r\n  const visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    const closestNode = unvisitedNodes.shift();\r\n    \r\n    if (closestNode === finishNode){\r\n       return visitedNodesInOrder;\r\n    }\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    const neighbourNodes = getNeighbourNodes(closestNode, grid);\r\n    for (let neighbourNode of neighbourNodes) {\r\n      let distance = closestNode.distance + 1;\r\n      //f = g + h\r\n      if (neighbourNotInUnvisitedNodes(neighbourNode, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbourNode);\r\n        neighbourNode.distance = distance;\r\n        neighbourNode.totalDistance =distance + manhattanDistance(neighbourNode, finishNode);\r\n        neighbourNode.previousNode = closestNode;\r\n      } else if (distance < neighbourNode.distance) {\r\n        neighbourNode.distance = distance;\r\n        neighbourNode.totalDistance =\r\n          distance + manhattanDistance(neighbourNode, finishNode);\r\n        neighbourNode.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbourNode, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbourNode.row && node.col === neighbourNode.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction manhattanDistance(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nfunction getNeighbourNodes(node, grid) {\r\n  const neighbourNodes = [];\r\n  let { row, col } = node;\r\n  if (row !== grid.length - 1) neighbourNodes.push(grid[row + 1][col]);\r\n  if (col !== grid[0].length - 1) neighbourNodes.push(grid[row][col + 1]);\r\n  if (row !== 0) neighbourNodes.push(grid[row - 1][col]);\r\n  if (col !== 0) neighbourNodes.push(grid[row][col - 1]);\r\n  return neighbourNodes.filter(\r\n    (neighbourNode) => !neighbourNode.isWall && !neighbourNode.isVisited\r\n  );\r\n}\r\n\r\n","\r\n// Returns all nodes in the order in which they were visited and\r\n// Returns pointers to their previous node allowing us to compute the shortest path\r\n//Dijkstra's Algorithm is weighted and guarantees the shortest path\r\nexport function Dijkstra (grid, startNode, finishNode) {\r\n    if (!startNode || !finishNode || startNode === finishNode) {\r\n      return false;\r\n    }\r\n    startNode.distance=0;\r\n    const sptSet=[];\r\n    const unvisitedNodes= getAllNodes(grid);\r\n    \r\n\r\n    while(unvisitedNodes.length!==0)\r\n{\r\n\r\nunvisitedNodes.sort((a,b)=>a.distance - b.distance);\r\nconst closestNode = unvisitedNodes.shift();\r\n\r\nif(closestNode.isWall)continue;\r\n\r\n//We have reached a dead end\r\nif (closestNode.distance === Infinity) return sptSet;\r\n//All required nodes processed\r\nif (closestNode === finishNode) return sptSet;\r\nclosestNode.isVisited=true;\r\nsptSet.push(closestNode);\r\n\r\nupdateUnvisitedNeighbourNodes(closestNode,grid);\r\n\r\n}\r\n}\r\nfunction getAllNodes(grid)\r\n{\r\n  let allnodes = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      allnodes.push(node);\r\n    }\r\n  }\r\n  return allnodes;\r\n\r\n}\r\n\r\nfunction updateUnvisitedNeighbourNodes(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbourNodes(node, grid);\r\n    for (const neighbour of unvisitedNeighbors) {\r\n      neighbour.distance = node.distance + 1;\r\n      neighbour.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbourNodes(node, grid) {\r\n    const neighbourNodes = [];\r\n    let { row, col } = node;\r\n    if (row !== grid.length - 1) neighbourNodes.push(grid[row + 1][col]);\r\n    if (col !== grid[0].length - 1) neighbourNodes.push(grid[row][col + 1]);\r\n    if (row !== 0) neighbourNodes.push(grid[row - 1][col]);\r\n    if (col !== 0) neighbourNodes.push(grid[row][col - 1]);\r\n    return neighbourNodes.filter(\r\n      (neighbourNode) => !neighbourNode.isWall && !neighbourNode.isVisited\r\n    );\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\n// Returns all nodes in the order in which they were visited and\r\n// Returns pointers to their previous node allowing us to compute the shortest path\r\n//Similar to Dijkstra \r\n//Greedy Best-first Search is weighted and does not guarantee the shortest path\r\nexport function GreedyBFS(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  const queue = [];//we will sort this queue and make it like a priority queue which includes all unvisited nodes\r\n  const visitedNodesInOrder = []; //closed list\r\n  \r\n  startNode.distance = 0;\r\n  queue.push(startNode);\r\n\r\n  while (queue.length)\r\n   {\r\n    queue.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    const closestNode = queue.shift();\r\n        \r\n    if(closestNode.isWall)continue;\r\n    closestNode.isVisited=true;\r\n\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n  \r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    const neighbours = getNeighbourNodes(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f = h\r\n      if (neighbourNotInUnvisitedNodes(neighbour, queue)) {\r\n        queue.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattanDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattanDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction manhattanDistance(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nfunction getNeighbourNodes(node, grid) {\r\n  const neighbourNodes = [];\r\n  let { row, col } = node;\r\n  if (row !== grid.length - 1) neighbourNodes.push(grid[row + 1][col]);\r\n  if (col !== grid[0].length - 1) neighbourNodes.push(grid[row][col + 1]);\r\n  if (row !== 0) neighbourNodes.push(grid[row - 1][col]);\r\n  if (col !== 0) neighbourNodes.push(grid[row][col - 1]);\r\n  return neighbourNodes.filter(\r\n    (neighbourNode) => !neighbourNode.isWall && !neighbourNode.isVisited\r\n  );\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, queue) {\r\n  for (let node of queue) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}","import React, { Component } from 'react';\r\nimport './PathfindingVisualizer.css';\r\nimport Node from './Node/Node';\r\nimport './Node/Node.css';\r\nimport Toggle from './components/togglebutton';\r\nimport {dfs} from '../algorithms/dfs'\r\nimport {bfs} from '../algorithms/bfs'\r\nimport {AStar} from '../algorithms/astar';\r\nimport {Dijkstra} from '../algorithms/Dijkstra';\r\nimport {GreedyBFS} from '../algorithms/greedyBestFirstSearch';\r\nimport { recursiveDivisionMaze } from '../mazealgorithms/recursiveDivisionMaze';\r\nimport { Spiral } from '../mazealgorithms/spiral';\r\nimport { randomMaze } from '../mazealgorithms/randomMaze';\r\nimport { stair } from '../mazealgorithms/stair';\r\nimport {CgSun } from \"react-icons/cg\";\r\nimport { HiMoon } from \"react-icons/hi\";\r\nimport { SocialIcon } from 'react-social-icons';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n    //Declaring basic properties which we will use throughout\r\n    \r\n        constructor(props) {\r\n            // eslint-disable-next-line\r\n            super(props);\r\n            let row_count;\r\n            row_count = Math.floor(window.innerHeight/26);\r\n            let col_count;\r\n            col_count = Math.floor(window.innerWidth/28);\r\n            this.state = {\r\n              grid: [],\r\n              theme : \"light\",\r\n              START_NODE_ROW: 7,\r\n              FINISH_NODE_ROW: 7,\r\n              START_NODE_COL: 6,\r\n              FINISH_NODE_COL: 10,\r\n              mouseIsPressed: false,\r\n              ROW_COUNT: row_count,\r\n              COLUMN_COUNT: col_count,\r\n              isRunning: false,\r\n              isGeneratingMaze: false,\r\n              isStartNode: false,\r\n              isFinishNode: false,\r\n              isWallNode: false, \r\n              currRow: 0,\r\n              currCol: 0,\r\n              speed : 10,\r\n              algorithm:\"Algorithm\",\r\n              msg :`Visualize Algorithm`,\r\n              \r\n              \r\n              \r\n              \r\n              \r\n\r\n            };\r\n\r\n          }\r\n        \r\n     \r\n     //Declaring lifecycle hooks\r\n     componentDidMount() {\r\n    \r\n       \r\n        const grid = this.getInitialGrid();\r\n        this.setState({grid});\r\n        this.setState({msg:  `Visualize ${this.state.algorithm}`});\r\n        console.log(grid[0][0]);\r\n       \r\n      \r\n      }\r\n  \r\n     \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n      \r\n\r\n\r\n\r\n      toggleIsRunning() {\r\n        this.setState({isRunning: !this.state.isRunning});\r\n\r\n      }\r\n      toggleIsGeneratingMaze(){\r\n        this.setState({isGeneratingMaze:!this.state.isGeneratingMaze});\r\n\r\n      }\r\n    //Setting up the initial grid\r\n    getInitialGrid = (rowCount = this.state.ROW_COUNT,colCount = this.state.COLUMN_COUNT) =>\r\n      { const initialGrid = [];\r\n        for (let row = 0; row < rowCount; row++) {\r\n          const currentRow = [];\r\n          for (let col = 0; col < colCount; col++) {\r\n            currentRow.push(this.createNode(row, col));\r\n          }\r\n          initialGrid.push(currentRow);\r\n        }\r\n        return initialGrid;\r\n      };\r\n      \r\n    createNode = (row, col) => {\r\n        return {row, col, isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n        isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row)+Math.abs(this.state.FINISH_NODE_COL - col),\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n        isNode: true,\r\n        animationstate: 'running',\r\n        \r\n\r\n        };\r\n    };\r\n    //Handling mouse events\r\n    handleMouseDown(row, col) {\r\n      if (!this.state.isRunning && !this.state.isGeneratingMaze) {\r\n        if (this.isGridClear()) {\r\n          if (document.getElementById(`node-${row}-${col}`).className ==='node node-start') \r\n          {\r\n            this.setState({mouseIsPressed: true,\r\n              isStartNode: true,\r\n              currRow: row, currCol: col,\r\n            });\r\n          }\r\n          else if (document.getElementById(`node-${row}-${col}`).className ==='node node-finish')\r\n          {\r\n            this.setState({mouseIsPressed: true,\r\n              isFinishNode: true,\r\n              currRow: row,currCol: col,\r\n            });\r\n          } else {\r\n            const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\r\n            this.setState({\r\n              grid: newGrid,\r\n              mouseIsPressed: true,\r\n              isWallNode: true,\r\n              currRow: row,\r\n              currCol: col,\r\n            });}\r\n        } else {\r\n          this.clearGrid();\r\n        }\r\n      }\r\n    }\r\n    //Create walls\r\n    getNewGridWithWallToggled = (grid, row, col)=>{\r\n      let newGrid = grid.slice();\r\n      let node = newGrid[row][col];\r\n      if (!node.isStart && !node.isFinish && node.isNode) {\r\n        let newNode = {\r\n          ...node,\r\n          isWall: !node.isWall,\r\n        };\r\n        newGrid[row][col] = newNode;\r\n      }\r\n      return newGrid;\r\n    };\r\n    \r\n    //if animation hasn't yet started update walls and other features or \r\n    //move start and end nodes if mouse is pressed\r\n    handleMouseEnter(row, col) {\r\n      if (!this.state.isRunning && !this.state.isGeneratingMaze) {\r\n        if (this.state.mouseIsPressed) {\r\n          const nodeClassName = document.getElementById(`node-${row}-${col}`).className;\r\n          if (this.state.isStartNode) {\r\n            if (nodeClassName !== 'node node-wall') {\r\n              const prevStartNode = this.state.grid[this.state.currRow][this.state.currCol];\r\n              prevStartNode.isStart = false;\r\n              document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className ='node';\r\n              this.setState({currRow: row, currCol: col});\r\n              const currStartNode = this.state.grid[row][col];\r\n              currStartNode.isStart = true;\r\n              document.getElementById(`node-${row}-${col}`).className ='node node-start';\r\n            }\r\n            this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n          } else if (this.state.isFinishNode) {\r\n            if (nodeClassName !== 'node node-wall') {\r\n              const prevFinishNode = this.state.grid[this.state.currRow][this.state.currCol];\r\n              prevFinishNode.isFinish = false;\r\n              document.getElementById(`node-${this.state.currRow}-${this.state.currCol}`).className = 'node';\r\n              this.setState({currRow: row, currCol: col});\r\n              const currFinishNode = this.state.grid[row][col];\r\n              currFinishNode.isFinish = true;\r\n              document.getElementById(`node-${row}-${col}`).className =\r\n                'node node-finish';\r\n            }\r\n            this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n          } else if (this.state.isWallNode) {\r\n            const newGrid = this.getNewGridWithWallToggled(this.state.grid, row, col);\r\n            this.setState({\r\n              grid: newGrid,\r\n              mouseIsPressed: true,\r\n              isWallNode: true,\r\n              currRow: row,\r\n              currCol: col,\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning && !this.state.isGeneratingMaze) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        \r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } \r\n      else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({isFinishNode, FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n\r\n    }\r\n    else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    }\r\n    else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n  //Checking if the grid initial layout hasn't been modified(by animation) \r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited-running' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n        else if(nodeClassName === 'node node-visited-paused'){\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  //Clearing the grid during/after animation\r\n  //Has no effect on walls\r\n  clearGrid() {\r\n    if (!this.state.isRunning && !this.state.isGeneratingMaze) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\r\n          if (nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall')\r\n          {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className ='node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n            Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n            Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish')\r\n          {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  //Clearing all the walls \r\n  clearWalls() {\r\n    if (!this.state.isRunning ) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className ='node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  //Manage animation speed\r\n  changeSpeed(speed){\r\n    switch(speed){\r\n      case 'Fast' : this.setState({\r\n        speed : 1,\r\n      });\r\n      \r\n      break;\r\n      case 'Normal' :  this.setState({\r\n        speed : 10,\r\n        });      \r\n        break;\r\n      case 'Slow' : this.setState({\r\n        speed : 50,\r\n        });\r\n        break;\r\n      default :\r\n        this.setState({\r\n          speed : 10,\r\n        });\r\n        break;\r\n      \r\n    }\r\n\r\n  }\r\n  //Creating Animations\r\n  visualize(algo) {\r\n    if (!this.state.isRunning && !this.state.isGeneratingMaze) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      \r\n      const {grid} = this.state;\r\n      const startNode =grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder;\r\n      switch (algo) {\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = Dijkstra(grid, startNode, finishNode);\r\n           \r\n          break;\r\n        case 'AStar':\r\n          visitedNodesInOrder = AStar(grid, startNode, finishNode);\r\n          break;\r\n        case 'BFS':\r\n          visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n          break;\r\n        case 'DFS':\r\n          visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n          break;\r\n        case 'Dijkstra':\r\n          visitedNodesInOrder = Dijkstra(grid, startNode, finishNode);\r\n          break;\r\n        case 'GreedyBFS':\r\n          visitedNodesInOrder = GreedyBFS(grid, startNode, finishNode);\r\n          break;\r\n        default:\r\n         \r\n          break;\r\n      }\r\n      if(this.state.algorithm !==\"Algorithm\"){\r\n      const nodesInShortestPathOrder = this.getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('finish');\r\n      this.animate(visitedNodesInOrder,nodesInShortestPathOrder);\r\n    }\r\n    }\r\n  }\r\n \r\n \r\n//Animate the path\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n \r\n    for (let i =0; i <= visitedNodesInOrder.length; i++) {\r\n      \r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {this.animateShortestPath(nodesInShortestPathOrder);}, this.state.speed* i);\r\n        return;\r\n      }\r\n         \r\n        setTimeout(() => {const node = visitedNodesInOrder[i];\r\n        \r\n       \r\n        const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n        if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish'){\r\n\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =`node node-visited`;\r\n      \r\n    \r\n        }\r\n       \r\n      }, this.state.speed* i);\r\n      \r\n      \r\n    } \r\n  \r\n    }\r\n  \r\n   \r\n    //Returns back the shortest path \r\n    getNodesInShortestPathOrder(finishNode) {\r\n      const nodesInShortestPathOrder = [];\r\n      let currentNode = finishNode;\r\n      //when it will reach the start node, previous node will contain null\r\n      while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n      }\r\n      return nodesInShortestPathOrder;\r\n    }\r\n    //Animating the shortest path\r\n    animateShortestPath(nodesInShortestPathOrder) {\r\n      for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n        if (nodesInShortestPathOrder[i] === 'finish') {\r\n          setTimeout(() => {this.toggleIsRunning();}, this.state.speed* i*5);\r\n        }\r\n        else {\r\n          setTimeout(() => {const node = nodesInShortestPathOrder[i];\r\n            \r\n            const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n            if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\r\n              \r\n              document.getElementById(`node-${node.row}-${node.col}`).className ='node node-shortest-path';\r\n            }\r\n          },this.state.speed* i*4);\r\n        }\r\n      }\r\n    }\r\n//Visualizing the maze generation\r\n    visualizeMaze(mazealgo) {\r\n      if (!this.state.isRunning && !this.state.isGeneratingMaze) {\r\n        this.clearGrid();\r\n        this.toggleIsGeneratingMaze();\r\n        const {grid} = this.state;\r\n        const startNode =grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n        const finishNode =grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n        let maze;\r\n        switch (mazealgo) {\r\n          case 'RecursiveDivisionMaze':\r\n            maze = recursiveDivisionMaze(grid, startNode, finishNode);\r\n            break;\r\n          case 'SpiralMaze':\r\n            maze = Spiral(grid, startNode, finishNode);\r\n            console.log(maze);\r\n            break;\r\n          case 'RandomMaze':\r\n            maze = randomMaze(grid, startNode, finishNode);\r\n            break;\r\n          case 'StairMaze':\r\n            maze = stair(grid, startNode, finishNode);\r\n            break;\r\n       \r\n          default:\r\n           \r\n            break;\r\n        }\r\n      \r\n        this.animateMaze(maze);\r\n     \r\n      }\r\n    }\r\n//Animating the maze generation\r\n    animateMaze(maze)  {\r\n      for (let i = 0; i <= maze.length; i++) {\r\n        if (i === maze.length) {\r\n          setTimeout(() => {\r\n            this.clearGrid();\r\n            this.toggleIsGeneratingMaze();\r\n           \r\n            let newGrid = this.getNewGridWithMaze(this.state.grid, maze);\r\n            this.setState({ grid: newGrid });\r\n          }, i * this.state.speed);\r\n         \r\n          return;\r\n        }\r\n        let wall = maze[i];\r\n        let node = this.state.grid[wall[0]][wall[1]];\r\n        setTimeout(() => {\r\n          //Walls\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-wall\";\r\n        }, i * this.state.speed);\r\n      }\r\n   \r\n    }\r\n  //Get new grid with maze in it\r\n   getNewGridWithMaze = (grid, maze) => {\r\n      let newGrid = grid.slice();\r\n      for (let wall of maze) {\r\n        let node = grid[wall[0]][wall[1]];\r\n        let newNode = {\r\n          ...node,\r\n          isWall: true,\r\n        };\r\n        newGrid[wall[0]][wall[1]] = newNode;\r\n      }\r\n      return newGrid;\r\n    };\r\n    \r\n\r\n//Toggle between dark and light themes\r\n    \r\n  changeTheme= () =>{\r\n       \r\n      if (this.state.theme === \"light\") {\r\n        this.setState({theme : \"dark\"});\r\n      } else {\r\n        this.setState({theme : \"light\"});\r\n      }\r\n  }\r\n //insert icon based on the theme\r\n  inserticon= ()=>{\r\n          return (this.state.theme === \"dark\" ? <HiMoon size={40} /> : <CgSun size={40} />);\r\n      \r\n\r\n  }\r\n  //Change the message on visualize button\r\n  changealgorithm=(algo)=>{\r\n  console.log(window.innerHeight,window.innerWidth);\r\n  this.setState({algorithm : algo});\r\n  \r\n  this.setState({msg:  `Visualize ${algo}`});\r\n          \r\n\r\n  }\r\n\r\n\r\n\r\n    render() { \r\n    \r\n      const {grid, mouseIsPressed} = this.state;\r\n      let navclass = \"navbar mb-1 navbar-expand-lg fixed-top navbar-\";\r\n      navclass+= (this.state.theme===\"dark\")? \"dark\" : \"light\";\r\n      let itemclass = \"nav-item\";\r\n      itemclass += (this.state.theme===\"dark\")? \"-dark\" : \"\";\r\n      let btnclass =\"btn mr-2 btn-\";\r\n      btnclass+=(this.state.theme===\"dark\")? \"success\":\"danger\";\r\n      let bgclass =\"mb-3\";\r\n      bgclass+= (this.state.theme===\"dark\")?\" text-white bg-dark\":\"text-dark bg-light\";\r\n      let visualizebtnclass =\"mr-2 visualizebtnclass\";\r\n      visualizebtnclass+= (this.state.theme===\"dark\")?\"dark\":\"light\";\r\n      \r\n      let tableid =(this.state.theme===\"dark\")? \"table-dark\":\"table-light\";\r\n       return (        \r\n             <div>\r\n            <div className={bgclass}>\r\n        \r\n<nav className={navclass} >\r\n<a className=\"navbar-brand\" href=\"#\"><b>PathFinding Visualizer</b></a>\r\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent-555\"\r\n    aria-controls=\"navbarSupportedContent-555\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n \r\n \r\n  <div className=\"collapse navbar-collapse \" id=\"navbarSupportedContent-555\">\r\n            <ul className=\"navbar-nav mr-auto\">             \r\n            <li className=\"nav-item dropdown \">\r\n             <a className=\"nav-link dropdown-toggle\" id=\"navbarDropdownMenuLink-555\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"href=\"#\">Algorithms\r\n             <span className=\"caret\"></span></a>\r\n             <div className=\" dropdown-menu text-center  mr-auto\" aria-labelledby=\"navbarDropdownMenuLink-555\">\r\n               <li className={itemclass}>\r\n                 <a className=\"nav-link \" href=\"#\" onClick={()=>this.changealgorithm(\"Dijkstra\")}>Dijkstra's Algorithm</a></li>\r\n               <li className={itemclass}>\r\n                 <a className=\"nav-link \" href=\"#\" onClick={()=>this.changealgorithm(\"AStar\")}>A* Search</a></li>\r\n               <li className={itemclass}>\r\n                 <a className=\"nav-link \" href=\"#\" onClick={()=>this.changealgorithm(\"GreedyBFS\")}>Greedy Best-first Search</a></li>\r\n               <li className={itemclass}>\r\n                 <a className=\"nav-link \"href=\"#\" onClick={()=>this.changealgorithm(\"BFS\")}>Breadth-first Search</a></li>\r\n               <li  className={itemclass}>\r\n                 <a className=\"nav-link \" href=\"#\" onClick={()=>this.changealgorithm(\"DFS\")}>Depth-first Search</a></li>\r\n             </div>\r\n           </li>\r\n           <button className={visualizebtnclass} onClick={()=>{\r\n             if(this.state.algorithm!=='Algorithm')\r\n             {this.visualize(this.state.algorithm);}\r\n             else{\r\n               this.setState({msg:\"Select an Algorithm\"});\r\n              } }\r\n            }>\r\n                {this.state.msg}\r\n            </button>\r\n                       \r\n            <li className=\"nav-item dropdown \">\r\n             <a className=\"nav-link dropdown-toggle\"  data-toggle=\"dropdown\" href=\"#\">Mazes\r\n             <span className=\"caret\"></span></a>\r\n             <ul className=\" dropdown-menu text-center mr-auto\">\r\n              \r\n               <li  className={itemclass}>\r\n                 <a className=\"nav-link\" href=\"#\" onClick={()=>this.visualizeMaze(\"RecursiveDivisionMaze\")}>RecursiveDivisionMaze</a></li>\r\n               <li  className={itemclass}>\r\n                 <a className=\"nav-link\" href=\"#\" onClick={()=>this.visualizeMaze(\"SpiralMaze\")}>Spiral Maze</a></li>\r\n               <li  className={itemclass}>\r\n                 <a className=\"nav-link\" href=\"#\" onClick={()=>this.visualizeMaze(\"RandomMaze\")}>Random Maze</a></li>\r\n               <li  className={itemclass}>\r\n                 <a className=\"nav-link\" href=\"#\" onClick={()=>this.visualizeMaze(\"StairMaze\")}>Stairs </a></li>\r\n             </ul>\r\n             </li>\r\n             \r\n           <button className={btnclass} onClick={()=>this.clearWalls()}>\r\n                 Clear Walls               \r\n            </button>\r\n            <button className={btnclass} onClick={()=>this.clearGrid()}>\r\n                 Clear Board               \r\n            </button>\r\n                     \r\n            <li className=\"nav-item dropdown \">\r\n             <a className=\"nav-link dropdown-toggle\"  data-toggle=\"dropdown\" href=\"#\">Speed\r\n             <span className=\"caret\"></span></a>\r\n             <ul className=\" mr-auto dropdown-menu\">\r\n               <li className={itemclass} >\r\n               <a className=\"nav-link\"href=\"#\" onClick={()=>this.changeSpeed('Fast')} >Fast</a></li>\r\n               <li className={itemclass} >\r\n               <a className=\"nav-link\"href=\"#\" onClick={()=>this.changeSpeed('Normal')} >Normal</a></li>\r\n               <li className={itemclass} >\r\n               <a className=\"nav-link\"href=\"#\" onClick={()=>this.changeSpeed('Slow')} >Slow</a></li>\r\n               \r\n            \r\n            </ul>\r\n            </li>\r\n          \r\n           <li >\r\n              <Toggle onClick={this.changeTheme}>\r\n                    {this.inserticon()}\r\n              </Toggle>\r\n              \r\n              </li>\r\n            \r\n            </ul>\r\n          </div>\r\n            </nav>\r\n          <div className=\"head d-inline-flex p-2 \">\r\n          <div class=\"p-2\" id=\"start\"></div>\r\n          <div class=\"p-2 itemclass\">Start Node</div>\r\n          <div class=\"p-2\" id=\"finish\"></div>\r\n          <div class=\"p-2 itemclass\">Finish Node</div>\r\n          <div class=\"p-2\" id=\"wall\"></div>\r\n          <div class=\"p-2 itemclass\">Wall</div>\r\n          <div class=\"p-2\" id=\"node\"></div>\r\n          <div class=\"p-2 itemclass\">Unvisited Node</div>\r\n          <div class=\"p-2\" id=\"shortest\"></div>\r\n          <div class=\"p-2 itemclass\">Shortest Path Node</div>\r\n          </div>\r\n          \r\n        <table \r\n          className=\"grid-container \" id={tableid}\r\n          onMouseLeave={() => this.handleMouseLeave()}>\r\n    \r\n    \r\n  \r\n          <tbody  className=\"grid\">\r\n          \r\n            {grid.map((row, rowIdx) => {//Item indexes are used as keys in rows and nodes as well\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFinish, isStart, isWall,animationstate} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        animationstate = {animationstate}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp(row, col)}\r\n                        row={row}></Node>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n\r\n              \r\n        \r\n<footer class=\"page-footer font-small special-color-dark pt-4\">\r\n\r\n  <div class=\"container\">\r\n\r\n    <ul class=\"list-unstyled list-inline text-center\">\r\n     \r\n      <li class=\"list-inline-item\">\r\n        <a class=\"btn-floating  mx-1\" href=\"https://github.com/PrajwalKalpande\" >\r\n        <SocialIcon bgColor=\"#3CB371\"  target=\"_blank\" url=\"https://github.com/PrajwalKalpande\" />\r\n        </a>\r\n      </li>\r\n\r\n      <li class=\"list-inline-item\">\r\n        <a class=\"btn-floating  mx-1\" href=\"https://www.instagram.com/prajwalkalpande3/\" >\r\n        <SocialIcon target=\"_blank\" url=\"https://www.instagram.com/prajwalkalpande3/\" />\r\n        </a>\r\n      </li>\r\n      <li class=\"list-inline-item\">\r\n        <a class=\"btn-floating  mx-1\"  href=\"mailto:prajwalkalpande3@gmail.com\">\r\n        <SocialIcon target=\"_blank\" url=\"https://mail.google.com/mail/u/0/#inbox\" />\r\n        </a>\r\n      </li>\r\n      <li class=\"list-inline-item\">\r\n        <a class=\"btn-floating  mx-1\"  href=\"https://www.facebook.com/people/Prajwal-Kalpande/100016414006945/\">\r\n        <SocialIcon target=\"_blank\" url=\"https://www.facebook.com/people/Prajwal-Kalpande/100016414006945/\" />\r\n        </a>\r\n      </li>\r\n    </ul>\r\n\r\n  </div>\r\n\r\n  <div class=\"footer-copyright text-center py-3\">\r\n  <div className= {bgclass} >\r\n  © Made by Prajwal Kalpande  </div>\r\n \r\n  </div>\r\n  \r\n</footer>\r\n\r\n            </div>\r\n            </div>\r\n           \r\n         \r\n        );\r\n              \r\n\r\n\r\n\r\n\r\n    }\r\n  }\r\n","\r\nexport function Spiral(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let maze=[];\r\n  let coffsetrow= Math.floor(Math.random()*15) - 7;\r\n  let coffsetcol= Math.floor(Math.random()*15) - 7;\r\n  let startRow = Math.floor(grid.length/2) + coffsetrow;\r\n  let startCol = Math.floor(grid[0].length/2)+ coffsetcol;\r\n  let temp;\r\n  let currentRow,currentCol;\r\n  currentCol =startCol;\r\n  currentRow = startRow;\r\n  let i =0;\r\n  while(true){\r\n    //down = 0 right = 1 up = 2 left = 3\r\n    \r\n    if(i%4===0){\r\n      temp = i+1 ;\r\n      \r\n      while(temp>0){\r\n      if((currentRow===startNode.row && currentCol===startNode.col)\r\n      ||(currentRow===finishNode.row && currentCol === finishNode.col))\r\n      {\r\n        currentRow++;\r\n        temp--;\r\n        continue;\r\n      }\r\n      maze.push([currentRow,currentCol]);\r\n     \r\n      if(currentRow===grid.length-1) return maze;\r\n      currentRow++;\r\n      \r\n      temp--;\r\n      }\r\n     \r\n    }\r\n      \r\n  //   }\r\n    else if(i%4===1){\r\n      temp = i+1 ;\r\n     \r\n      while(temp>0){\r\n      if((currentRow===startNode.row && currentCol===startNode.col)\r\n      ||(currentRow===finishNode.row && currentCol === finishNode.col))\r\n      {\r\n        currentCol++;\r\n        temp--;\r\n        continue;\r\n      }       \r\n      if(currentCol===grid[0].length-1)return maze;\r\n     \r\n      maze.push([currentRow,currentCol]);\r\n      currentCol++;\r\n      temp--;\r\n      }\r\n    }\r\n    else if(i%4===2){\r\n      temp = i +1;\r\n     \r\n      while(temp>0){\r\n      if((currentRow===startNode.row && currentCol===startNode.col)\r\n      ||(currentRow===finishNode.row && currentCol === finishNode.col))\r\n      {\r\n      currentRow--;\r\n      temp--;\r\n      continue;\r\n    }\r\n        \r\n      if(currentRow===0)return maze;\r\n      \r\n      maze.push([currentRow,currentCol]);\r\n      currentRow--;\r\n      temp--;\r\n      }\r\n    }\r\n    else{\r\n      temp = i +1;\r\n    \r\n      while(temp>0){\r\n      if((currentRow===startNode.row && currentCol===startNode.col)\r\n      ||(currentRow===finishNode.row && currentCol === finishNode.col))\r\n      {\r\n        currentCol--;\r\n        temp--;\r\n        continue;\r\n      }\r\n      if(currentCol===0)return maze;\r\n     \r\n      \r\n      maze.push([currentRow,currentCol]);\r\n      currentCol--;\r\n      temp--;\r\n      }\r\n    }\r\n\r\n  i++;\r\n  \r\n \r\n  }\r\n\r\n\r\n}\r\n","export function randomMaze(grid, startNode, finishNode) {\r\n    if (!startNode || !finishNode || startNode === finishNode) {\r\n      return false;\r\n    }\r\n    let maze = [];\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[0].length; col++) {\r\n        if (\r\n          (row === startNode.row && col === startNode.col) ||\r\n          (row === finishNode.row && col === finishNode.col)\r\n        )\r\n          continue;\r\n        if (Math.random() < 0.25) {\r\n          maze.push([row, col]);\r\n        }\r\n      }\r\n    }\r\n    maze.sort(() => Math.random() - 0.5);\r\n    return maze;\r\n  }","import './App.css';\r\nimport React from 'react';\r\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer'\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    \r\n      <PathfindingVisualizer  />\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './bootstrap/bootstrap/dist/css/bootstrap.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n   \r\n    <App />\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}